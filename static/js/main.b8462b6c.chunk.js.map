{"version":3,"sources":["components/RowTable.js","assets/js/config.js","pages/Dashboard.js","pages/Exam.js","pages/Home.js","App.js","serviceWorker.js","index.js","assets/images/prof_button.png","assets/images/stu_button.png"],"names":["RowTable","props","rows","length","Table","Object","keys","map","key","row","onClick","rowClick","id","values","value","i","SERVER_URL","socket","io","StudentsTable","useState","setRows","fetchRows","axios","get","examId","then","response","data","result","useEffect","on","event","console","log","Dashboard","instructor","setInstructor","examName","setExamName","examList","setExamList","Container","Card","CardBody","CardTitle","CardText","Form","inline","FormGroup","Label","for","hidden","Input","type","name","placeholder","onChange","e","target","Button","post","exam","ExamsTable","parentNode","emit","message","Exam","studentId","setStudentId","studentName","setStudentName","to","src","prof_button","alt","width","height","stu_button","App","basename","process","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","module","exports"],"mappings":"6PAGe,SAASA,EAASC,GAAQ,IAAD,IACpC,OAAO,UAAAA,EAAMC,YAAN,eAAYC,QACf,kBAACC,EAAA,EAAD,KACI,+BACA,4BACKC,OAAOC,KAAKL,EAAMC,KAAK,IAAIK,KAAI,SAAAC,GAAG,OAAI,wBAAIA,IAAKA,GAAMA,QAG1D,yCACCP,EAAMC,YADP,aACC,EAAYK,KAAI,SAAAE,GACb,OAAO,wBAAIC,QAAST,EAAMU,SAAUC,GAAIH,EAAIG,IAAKP,OAAOQ,OAAOJ,GAAKF,KAAK,SAACO,EAAOC,GAAR,OAAc,wBAAIP,IAAKO,GAAID,YAI5G,qC,kGCjBKE,EAAa,2C,yBCatBC,EAASC,IAAGF,GAShB,SAASG,EAAclB,GAAQ,IAAD,EACFmB,qBADE,mBACnBlB,EADmB,KACbmB,EADa,KAO1B,SAASC,IACLC,IAAMC,IAAN,UAAaR,EAAb,iBAAgCf,EAAMwB,OAAtC,eACKC,MAAK,SAAAC,GAEF,OADAN,EAAQM,EAASC,KAAKC,QACf3B,KAOnB,OAHA4B,oBAAUR,EAAW,IACrBrB,EAAMgB,OAAOc,GAAG,cAAeT,GAExB,kBAACtB,EAAD,CAAUE,KAAMA,EAAMS,SAf7B,SAAkBqB,GACdC,QAAQC,IAAIjC,EAAMgB,WAiBX,SAASkB,IAAa,IAAD,EACIf,mBAAS,IADb,mBACzBgB,EADyB,KACbC,EADa,OAEAjB,mBAAS,IAFT,mBAEzBkB,EAFyB,KAEfC,EAFe,OAGAnB,qBAHA,mBAGzBoB,EAHyB,KAGfC,EAHe,KAgBhC,OAFAX,qBATA,WACIP,IAAMC,IAAIR,EAAa,SAClBU,MAAK,SAAAC,GAGF,OAFAc,EAAYd,EAASC,KAAKC,QAC1BI,QAAQC,IAAIM,GACLA,OAIG,IAGlB,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,cACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACR,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,YAAYC,QAAM,GAA7B,cACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,KAAK,aAAa3C,GAAG,aAAa4C,YAAY,kBAC1D1C,MAAOsB,EAAYqB,SAAU,SAAAC,GAAC,OAAIrB,EAAcqB,EAAEC,OAAO7C,WAEpE,kBAACmC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,WAAWC,QAAM,GAA5B,YACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,KAAK,WAAW3C,GAAG,WAAW4C,YAAY,mBACtD1C,MAAOwB,EAAUmB,SAAU,SAAAC,GAAC,OAAInB,EAAYmB,EAAEC,OAAO7C,WAGhE,kBAAC8C,EAAA,EAAD,CAAQlD,QAiBhC,WACIa,IAAMsC,KAAK7C,EAAa,QAAS,CAACoB,aAAYmB,KAAMjB,IAC/CZ,MAAK,SAAAC,GAAQ,OAAIM,QAAQC,IAAIP,QAnBd,mBAjBpB,OAsBKa,QAtBL,IAsBKA,OAtBL,EAsBKA,EAAUjC,KAAI,SAAAuD,GAAI,OACf,kBAACnB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,aAAiBiB,EAAKP,MACtB,kBAACT,EAAA,EAAD,KACI,kBAAC3B,EAAD,CAAeF,OAAQA,EAAQQ,OAAQqC,EAAKlD,YC1ExE,SAASmD,EAAW9D,GAAQ,IAAD,EACCmB,qBADD,mBAChBlB,EADgB,KACVmB,EADU,KAUvB,SAASC,IACLC,IAAMC,IAAIR,EAAa,SAClBU,MAAK,SAAAC,GAEF,OADAN,EAAQM,EAASC,KAAKC,QACf3B,KAOnB,OAHA4B,oBAAUR,EAAW,IACrBrB,EAAMgB,OAAOc,GAAG,cAAeT,GAExB,kBAACtB,EAAD,CAAUE,KAAMA,EAAMS,SAlB7B,SAAkBqB,GACd,IAAIP,EAASO,EAAM2B,OAAOK,WAAWpD,GACrCqB,QAAQC,IAAIjC,EAAMgB,QAClBhB,EAAMgB,OAAOgD,KAAK,YAAa,CAACxC,WAChCQ,QAAQC,IAAI,YAAcT,MDNlCR,EAAOc,GAAG,WAAW,SAAUH,GAC3BK,QAAQC,IAAIN,EAAKsC,YAErBjD,EAAOc,GAAG,WAAW,WAEjBE,QAAQC,IAAI,uBCkBhB,IAAIjB,EAASC,IAAGF,GAQD,SAASmD,IAAQ,IAAD,EACO/C,mBAAS,IADhB,mBACpBgD,EADoB,KACTC,EADS,OAEWjD,mBAAS,IAFpB,mBAEpBkD,EAFoB,KAEPC,EAFO,KAI3B,OACI,kBAAC7B,EAAA,EAAD,KACI,2BAAIzB,EAAOL,IACX,2BAAIwD,GACJ,2BAAIE,GACJ,kBAAC3B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,cACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,QAAM,GACR,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,YAAYC,QAAM,GAA7B,SACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,KAAK,YAAY3C,GAAG,YAAY4C,YAAY,aACxD1C,MAAOsD,EAAWX,SAAU,SAAAC,GAAC,OAAIW,EAAaX,EAAEC,OAAO7C,WAElE,kBAACmC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,IAAI,cAAcC,QAAM,GAA/B,YACA,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,KAAK,cAAc3C,GAAG,cAAc4C,YAAY,OAC5D1C,MAAOwD,EAAab,SAAU,SAAAC,GAAC,OAAIa,EAAeb,EAAEC,OAAO7C,WAGtE,kBAAC8C,EAAA,EAAD,CAAQlD,QAUhC,SAAyBsB,GACrBC,QAAQC,IAAR,mBAAwBkC,EAAxB,YAAqCE,EAArC,YAAoDrD,EAAOL,KAC3DK,EAAOgD,KAAK,WAAY,CAACrD,GAAIwD,EAAWb,KAAMe,MAZ1B,gBAMhB,kBAACP,EAAD,CAAY9C,OAAQA,KAtChCA,EAAOc,GAAG,WAAW,SAAUH,GAC3BK,QAAQC,IAAIN,EAAKsC,YAErBjD,EAAOc,GAAG,WAAW,WAEjBE,QAAQC,IAAI,uB,6CCpCD,SAASiC,IACpB,OACI,oCACI,uBAAGvD,GAAG,aAAN,sBACA,uBAAGA,GAAG,eAAN,mBACA,yBAAKA,GAAG,QACJ,6BACI,kBAAC,IAAD,CAAM4D,GAAG,cACL,yBACIC,IAAKC,IACLC,IAAI,oDACJC,MAAM,MACNC,OAAO,UAInB,6BACI,kBAAC,IAAD,CAAML,GAAG,SACL,yBACIC,IAAKK,IACLH,IAAI,8CACJC,MAAM,MACNC,OAAO,YClBpB,SAASE,IACpB,OACI,kBAAC,IAAD,CAAQC,SAAUC,mBACd,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,GACnB,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOD,KAAK,cACR,kBAAC/C,EAAD,OAEJ,kBAAC,IAAD,CAAO+C,KAAK,SACR,kBAACf,EAAD,SCVAiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACZ,EAAD,OAEFa,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtE,MAAK,SAAAuE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnE,QAAQmE,MAAMA,EAAMlC,a,mBEzI5BmC,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.b8462b6c.chunk.js","sourcesContent":["import React, {useEffect} from \"react\";\nimport Table from \"reactstrap/es/Table\";\n\nexport default function RowTable(props) {\n    return props.rows?.length ? (\n        <Table>\n            <thead>\n            <tr>\n                {Object.keys(props.rows[0]).map(key => <th key={key}>{key}</th>)}\n            </tr>\n            </thead>\n            <tbody>\n            {props.rows?.map(row => {\n                return <tr onClick={props.rowClick} id={row.id}>{Object.values(row).map(((value, i) => <td key={i}>{value}</td>))}</tr>\n            })}\n            </tbody>\n        </Table>\n    ) : <></>\n}","export const SERVER_URL = 'https://nocheat-server.azurewebsites.net'","import React, {useEffect, useState} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport RowTable from \"../components/RowTable\";\nimport CardTitle from \"reactstrap/es/CardTitle\";\nimport CardText from \"reactstrap/es/CardText\";\nimport {Button, Form, FormGroup, Input, Label} from \"reactstrap\";\nimport CardBody from \"reactstrap/es/CardBody\";\nimport Container from \"reactstrap/es/Container\";\nimport axios from \"axios\";\nimport {SERVER_URL} from \"../assets/js/config\";\nimport io from \"socket.io-client\";\nimport Card from \"reactstrap/es/Card\";\n\nlet socket = io(SERVER_URL)\nsocket.on('success', function (data) {\n    console.log(data.message)\n})\nsocket.on('connect', function () {\n    // setSocketId(socket.id)\n    console.log('socket connected')\n})\n\nfunction StudentsTable(props) {\n    const [rows, setRows] = useState()\n\n    function rowClick(event) {\n        console.log(props.socket)\n    }\n\n    function fetchRows() {\n        axios.get(`${SERVER_URL}/exam/${props.examId}/examinees`)\n            .then(response => {\n                setRows(response.data.result)\n                return rows\n            })\n    }\n\n    useEffect(fetchRows, [])\n    props.socket.on('exam_update', fetchRows)\n\n    return <RowTable rows={rows} rowClick={rowClick}/>\n}\n\nexport default function Dashboard() {\n    const [instructor, setInstructor] = useState('')\n    const [examName, setExamName] = useState('')\n    const [examList, setExamList] = useState()\n\n    function fetchExams() {\n        axios.get(SERVER_URL + '/exam')\n            .then(response => {\n                setExamList(response.data.result)\n                console.log(examList)\n                return examList\n            })\n    }\n\n    useEffect(fetchExams, [])\n\n    return (\n        <Container>\n            <Card>\n                <CardBody>\n                    <CardTitle>Login</CardTitle>\n                    <CardText>\n                        <Form inline>\n                            <FormGroup>\n                                <Label for=\"studentId\" hidden>Instructor</Label>\n                                <Input type=\"text\" name=\"instructor\" id=\"instructor\" placeholder=\"Instructor name\"\n                                       value={instructor} onChange={e => setInstructor(e.target.value)}/>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"examName\" hidden>Password</Label>\n                                <Input type=\"text\" name=\"examName\" id=\"examName\" placeholder=\"Examination Name\"\n                                       value={examName} onChange={e => setExamName(e.target.value)}/>\n                            </FormGroup>\n\n                            <Button onClick={CreateExam}>Create Exam</Button>\n                        </Form>\n                    </CardText>\n                </CardBody>\n            </Card>\n            {examList?.map(exam =>\n                <Card>\n                    <CardBody>\n                        <CardTitle>Test {exam.name}</CardTitle>\n                        <CardText>\n                            <StudentsTable socket={socket} examId={exam.id}/>\n                        </CardText>\n                    </CardBody>\n                </Card>)}\n        </Container>\n    )\n\n    function CreateExam() {\n        axios.post(SERVER_URL + '/exam', {instructor, name: examName})\n            .then(response => console.log(response))\n    }\n}","import React, {useEffect, useState} from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button, Form, FormGroup, Input, Label} from \"reactstrap\";\nimport Card from \"reactstrap/es/Card\";\nimport CardBody from \"reactstrap/es/CardBody\";\nimport CardTitle from \"reactstrap/es/CardTitle\";\nimport CardText from \"reactstrap/es/CardText\";\nimport Container from \"reactstrap/es/Container\";\nimport io from \"socket.io-client\"\nimport RowTable from \"../components/RowTable\";\nimport {SERVER_URL} from \"../assets/js/config\";\nimport axios from \"axios\";\n\nfunction ExamsTable(props) {\n    const [rows, setRows] = useState()\n\n    function rowClick(event) {\n        let examId = event.target.parentNode.id\n        console.log(props.socket)\n        props.socket.emit('exam_join', {examId})\n        console.log('exam_join' + examId)\n    }\n\n    function fetchRows() {\n        axios.get(SERVER_URL + '/exam')\n            .then(response => {\n                setRows(response.data.result)\n                return rows\n            })\n    }\n\n    useEffect(fetchRows, [])\n    props.socket.on('exam_update', fetchRows)\n\n    return <RowTable rows={rows} rowClick={rowClick}/>\n}\n\nlet socket = io(SERVER_URL)\nsocket.on('success', function (data) {\n    console.log(data.message)\n})\nsocket.on('connect', function () {\n    // setSocketId(socket.id)\n    console.log('socket connected')\n})\nexport default function Exam() {\n    const [studentId, setStudentId] = useState('')\n    const [studentName, setStudentName] = useState('')\n\n    return (\n        <Container>\n            <p>{socket.id}</p>\n            <p>{studentId}</p>\n            <p>{studentName}</p>\n            <Card>\n                <CardBody>\n                    <CardTitle>Login</CardTitle>\n                    <CardText>\n                        <Form inline>\n                            <FormGroup>\n                                <Label for=\"studentId\" hidden>Email</Label>\n                                <Input type=\"text\" name=\"studentId\" id=\"studentId\" placeholder=\"Student ID\"\n                                       value={studentId} onChange={e => setStudentId(e.target.value)}/>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"studentName\" hidden>Password</Label>\n                                <Input type=\"text\" name=\"studentName\" id=\"studentName\" placeholder=\"Name\"\n                                       value={studentName} onChange={e => setStudentName(e.target.value)}/>\n                            </FormGroup>\n\n                            <Button onClick={registerStudent}>Register</Button>\n                        </Form>\n                    </CardText>\n                </CardBody>\n\n            </Card>\n            <ExamsTable socket={socket}/>\n        </Container>\n    )\n\n    function registerStudent(event) {\n        console.log(`register ${studentId} ${studentName} ${socket.id}`)\n        socket.emit('register', {id: studentId, name: studentName})\n    }\n\n\n}","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nimport \"../assets/styles/app.css\";\nimport prof_button from \"../assets/images/prof_button.png\";\nimport stu_button from \"../assets/images/stu_button.png\";\n\nexport default function Exam() {\n    return (\n        <>\n            <p id=\"app-title\">NO CHEATING HELPER</p>\n            <p id=\"choose-mode\">choose the mode</p>\n            <div id=\"grid\">\n                <div>\n                    <Link to=\"/dashboard\">\n                        <img\n                            src={prof_button}\n                            alt=\"교수님으로 로그인\"\n                            width=\"350\"\n                            height=\"350\"\n                        />\n                    </Link>\n                </div>\n                <div>\n                    <Link to=\"/exam\">\n                        <img\n                            src={stu_button}\n                            alt=\"학생으로 로그인\"\n                            width=\"350\"\n                            height=\"350\"\n                        />\n                    </Link>\n                </div>\n            </div>\n        </>\n    );\n}\n","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nimport Dashboard from \"./pages/Dashboard\";\nimport Exam from \"./pages/Exam\";\nimport Home from \"./pages/Home\";\n\nexport default function App() {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n                <Route path=\"/\" exact={true}>\n                    <Home></Home>\n                </Route>\n                <Route path=\"/dashboard\">\n                    <Dashboard></Dashboard>\n                </Route>\n                <Route path=\"/exam\">\n                    <Exam></Exam>\n                </Route>\n            </Switch>\n        </Router>\n    );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/prof_button.c162a5e7.png\";","module.exports = __webpack_public_path__ + \"static/media/stu_button.c1dbd6f8.png\";"],"sourceRoot":""}